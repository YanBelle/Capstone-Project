services:
  # ML-First anomaly detection service
  anomaly-detector:
    build: ./services/anomaly-detector
    container_name: abm-ml-anomaly-detector
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL}
      - MODEL_UPDATE_INTERVAL=${MODEL_UPDATE_INTERVAL}
      - ANOMALY_THRESHOLD=${ANOMALY_THRESHOLD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BERT_MODEL=${BERT_MODEL}
      - TRANSFORMERS_CACHE=/app/cache
    volumes:
      - ./data/models:/app/models
      - ./data/logs:/app/logs
      - ./data/input:/app/input
      - ./data/output:/app/output
      - ./data/sessions:/app/data/sessions
      - transformer-cache:/app/cache
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - abm-network

  # API service with expert labeling endpoints
  api:
    build: ./services/api
    container_name: abm-ml-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./data/models:/app/models
      - ./data/input:/app/input
      - ./data/sessions:/app/data/sessions
    depends_on:
      - postgres
      - redis
      - anomaly-detector
    restart: unless-stopped
    networks:
      - abm-network

  # Enhanced dashboard with expert labeling interface
  dashboard:
    build: ./services/dashboard
    container_name: abm-ml-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - abm-network

  # PostgreSQL with ML schema
  postgres:
    image: postgres:15-alpine
    container_name: abm-ml-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - abm-network

  # Redis for caching and real-time
  redis:
    image: redis:7-alpine
    container_name: abm-ml-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - abm-network

  # Jupyter for ML analysis
  jupyter:
    build: ./services/jupyter
    container_name: abm-ml-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=ml_jupyter_token_123
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - abm-network

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: abm-ml-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ml_admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - abm-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: abm-ml-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - abm-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:
  transformer-cache:

networks:
  abm-network:
    driver: bridge
